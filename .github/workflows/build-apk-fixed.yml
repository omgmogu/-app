name: Build Android APK - Fixed

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-20.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Set up Java JDK 11
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          git zip unzip wget curl \
          build-essential libffi-dev libssl-dev \
          python3-dev python3-pip python3-setuptools \
          autotools-dev autoconf pkg-config libtool \
          zlib1g-dev libncurses5-dev libncursesw5-dev \
          libtinfo5 cmake libffi-dev libssl-dev
    
    - name: Upgrade pip and install basic tools
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools
    
    - name: Install buildozer and dependencies
      run: |
        pip install buildozer
        pip install cython==0.29.33
        pip install kivy[base]==2.1.0
    
    - name: Set up environment variables
      run: |
        echo "ANDROID_HOME=/opt/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=/opt/android-sdk" >> $GITHUB_ENV
        echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
    
    - name: Setup Android SDK
      run: |
        mkdir -p /opt/android-sdk
        cd /opt/android-sdk
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip
        unzip -q commandlinetools-linux-8512546_latest.zip
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
        
        export PATH=$PATH:/opt/android-sdk/cmdline-tools/latest/bin
        
        # Accept licenses
        yes | /opt/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
        # Install required SDK packages
        /opt/android-sdk/cmdline-tools/latest/bin/sdkmanager \
          "platforms;android-33" \
          "build-tools;33.0.2" \
          "platform-tools" || true
    
    - name: Create simple main.py
      working-directory: mobile
      run: |
        # 使用简化版本的main.py确保构建成功
        cp main_simple.py main.py
        
        # 创建简化的buildozer.spec
        cp buildozer_fixed.spec buildozer.spec
        
        # 验证文件
        ls -la
        head -20 buildozer.spec
    
    - name: Cache buildozer global directory
      uses: actions/cache@v4
      with:
        path: |
          ~/.buildozer
        key: ${{ runner.os }}-buildozer-global
    
    - name: Cache buildozer directory
      uses: actions/cache@v4
      with:
        path: |
          mobile/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('mobile/buildozer.spec') }}
    
    - name: Build APK
      working-directory: mobile
      timeout-minutes: 60
      run: |
        export PATH=$PATH:/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-sdk/platform-tools
        export ANDROID_HOME=/opt/android-sdk
        export ANDROID_SDK_ROOT=/opt/android-sdk
        
        # 显示环境信息
        echo "=== Environment Info ==="
        echo "Python version: $(python --version)"
        echo "Java version: $(java -version 2>&1 | head -1)"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "PATH: $PATH"
        
        # 显示buildozer版本
        buildozer --version
        
        # 开始构建，设置详细输出
        echo "=== Starting APK Build ==="
        buildozer android debug --verbose
    
    - name: List build outputs
      working-directory: mobile
      run: |
        echo "=== Build Directory Contents ==="
        ls -la
        
        echo "=== Bin Directory Contents ==="
        ls -la bin/ || echo "No bin directory found"
        
        echo "=== APK Files ==="
        find . -name "*.apk" -type f || echo "No APK files found"
    
    - name: Upload APK
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: |
          mobile/bin/*.apk
          mobile/*.apk
        retention-days: 30
    
    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          mobile/.buildozer/android/platform/build-*/**/*.log
          mobile/.buildozer/**/*.log
        retention-days: 7
    
    - name: Build summary
      if: always()
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d mobile/bin ] && [ -n "$(ls mobile/bin/*.apk 2>/dev/null)" ]; then
          echo "✅ **APK Build Successful**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Generated APK files:" >> $GITHUB_STEP_SUMMARY
          for apk in mobile/bin/*.apk; do
            if [ -f "$apk" ]; then
              size=$(du -h "$apk" | cut -f1)
              echo "- $(basename "$apk") ($size)" >> $GITHUB_STEP_SUMMARY
            fi
          done
        else
          echo "❌ **APK Build Failed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the build logs for details." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Build completed at: $(date)" >> $GITHUB_STEP_SUMMARY